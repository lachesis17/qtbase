/****************************************************************************
** Meta object code from reading C++ file 'qhttpheaders.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../../../../src/network/access/qhttpheaders.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'qhttpheaders.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSQHttpHeadersENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSQHttpHeadersENDCLASS = QtMocHelpers::stringData(
    "QHttpHeaders",
    "WellKnownHeader",
    "AIM",
    "Accept",
    "AcceptAdditions",
    "AcceptCH",
    "AcceptDatetime",
    "AcceptEncoding",
    "AcceptFeatures",
    "AcceptLanguage",
    "AcceptPatch",
    "AcceptPost",
    "AcceptRanges",
    "AcceptSignature",
    "AccessControlAllowCredentials",
    "AccessControlAllowHeaders",
    "AccessControlAllowMethods",
    "AccessControlAllowOrigin",
    "AccessControlExposeHeaders",
    "AccessControlMaxAge",
    "AccessControlRequestHeaders",
    "AccessControlRequestMethod",
    "Age",
    "Allow",
    "ALPN",
    "AltSvc",
    "AltUsed",
    "Alternates",
    "ApplyToRedirectRef",
    "AuthenticationControl",
    "AuthenticationInfo",
    "Authorization",
    "CacheControl",
    "CacheStatus",
    "CalManagedID",
    "CalDAVTimezones",
    "CapsuleProtocol",
    "CDNCacheControl",
    "CDNLoop",
    "CertNotAfter",
    "CertNotBefore",
    "ClearSiteData",
    "ClientCert",
    "ClientCertChain",
    "Close",
    "Connection",
    "ContentDigest",
    "ContentDisposition",
    "ContentEncoding",
    "ContentID",
    "ContentLanguage",
    "ContentLength",
    "ContentLocation",
    "ContentRange",
    "ContentSecurityPolicy",
    "ContentSecurityPolicyReportOnly",
    "ContentType",
    "Cookie",
    "CrossOriginEmbedderPolicy",
    "CrossOriginEmbedderPolicyReportOnly",
    "CrossOriginOpenerPolicy",
    "CrossOriginOpenerPolicyReportOnly",
    "CrossOriginResourcePolicy",
    "DASL",
    "Date",
    "DAV",
    "DeltaBase",
    "Depth",
    "Destination",
    "DifferentialID",
    "DPoP",
    "DPoPNonce",
    "EarlyData",
    "ETag",
    "Expect",
    "ExpectCT",
    "Expires",
    "Forwarded",
    "From",
    "Hobareg",
    "Host",
    "If",
    "IfMatch",
    "IfModifiedSince",
    "IfNoneMatch",
    "IfRange",
    "IfScheduleTagMatch",
    "IfUnmodifiedSince",
    "IM",
    "IncludeReferredTokenBindingID",
    "KeepAlive",
    "Label",
    "LastEventID",
    "LastModified",
    "Link",
    "Location",
    "LockToken",
    "MaxForwards",
    "MementoDatetime",
    "Meter",
    "MIMEVersion",
    "Negotiate",
    "NEL",
    "ODataEntityId",
    "ODataIsolation",
    "ODataMaxVersion",
    "ODataVersion",
    "OptionalWWWAuthenticate",
    "OrderingType",
    "Origin",
    "OriginAgentCluster",
    "OSCORE",
    "OSLCCoreVersion",
    "Overwrite",
    "PingFrom",
    "PingTo",
    "Position",
    "Prefer",
    "PreferenceApplied",
    "Priority",
    "ProxyAuthenticate",
    "ProxyAuthenticationInfo",
    "ProxyAuthorization",
    "ProxyStatus",
    "PublicKeyPins",
    "PublicKeyPinsReportOnly",
    "Range",
    "RedirectRef",
    "Referer",
    "Refresh",
    "ReplayNonce",
    "ReprDigest",
    "RetryAfter",
    "ScheduleReply",
    "ScheduleTag",
    "SecPurpose",
    "SecTokenBinding",
    "SecWebSocketAccept",
    "SecWebSocketExtensions",
    "SecWebSocketKey",
    "SecWebSocketProtocol",
    "SecWebSocketVersion",
    "Server",
    "ServerTiming",
    "SetCookie",
    "Signature",
    "SignatureInput",
    "SLUG",
    "SoapAction",
    "StatusURI",
    "StrictTransportSecurity",
    "Sunset",
    "SurrogateCapability",
    "SurrogateControl",
    "TCN",
    "TE",
    "Timeout",
    "Topic",
    "Traceparent",
    "Tracestate",
    "Trailer",
    "TransferEncoding",
    "TTL",
    "Upgrade",
    "Urgency",
    "UserAgent",
    "VariantVary",
    "Vary",
    "Via",
    "WantContentDigest",
    "WantReprDigest",
    "WWWAuthenticate",
    "XContentTypeOptions",
    "XFrameOptions",
    "AcceptCharset",
    "CPEPInfo",
    "Pragma",
    "ProtocolInfo",
    "ProtocolQuery"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSQHttpHeadersENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       1,   14, // enums/sets
       0,    0, // constructors
       4,       // flags
       0,       // signalCount

 // enums: name, alias, flags, count, data
       1,    1, 0x2,  177,   19,

 // enum data: key, value
       2, uint(QHttpHeaders::WellKnownHeader::AIM),
       3, uint(QHttpHeaders::WellKnownHeader::Accept),
       4, uint(QHttpHeaders::WellKnownHeader::AcceptAdditions),
       5, uint(QHttpHeaders::WellKnownHeader::AcceptCH),
       6, uint(QHttpHeaders::WellKnownHeader::AcceptDatetime),
       7, uint(QHttpHeaders::WellKnownHeader::AcceptEncoding),
       8, uint(QHttpHeaders::WellKnownHeader::AcceptFeatures),
       9, uint(QHttpHeaders::WellKnownHeader::AcceptLanguage),
      10, uint(QHttpHeaders::WellKnownHeader::AcceptPatch),
      11, uint(QHttpHeaders::WellKnownHeader::AcceptPost),
      12, uint(QHttpHeaders::WellKnownHeader::AcceptRanges),
      13, uint(QHttpHeaders::WellKnownHeader::AcceptSignature),
      14, uint(QHttpHeaders::WellKnownHeader::AccessControlAllowCredentials),
      15, uint(QHttpHeaders::WellKnownHeader::AccessControlAllowHeaders),
      16, uint(QHttpHeaders::WellKnownHeader::AccessControlAllowMethods),
      17, uint(QHttpHeaders::WellKnownHeader::AccessControlAllowOrigin),
      18, uint(QHttpHeaders::WellKnownHeader::AccessControlExposeHeaders),
      19, uint(QHttpHeaders::WellKnownHeader::AccessControlMaxAge),
      20, uint(QHttpHeaders::WellKnownHeader::AccessControlRequestHeaders),
      21, uint(QHttpHeaders::WellKnownHeader::AccessControlRequestMethod),
      22, uint(QHttpHeaders::WellKnownHeader::Age),
      23, uint(QHttpHeaders::WellKnownHeader::Allow),
      24, uint(QHttpHeaders::WellKnownHeader::ALPN),
      25, uint(QHttpHeaders::WellKnownHeader::AltSvc),
      26, uint(QHttpHeaders::WellKnownHeader::AltUsed),
      27, uint(QHttpHeaders::WellKnownHeader::Alternates),
      28, uint(QHttpHeaders::WellKnownHeader::ApplyToRedirectRef),
      29, uint(QHttpHeaders::WellKnownHeader::AuthenticationControl),
      30, uint(QHttpHeaders::WellKnownHeader::AuthenticationInfo),
      31, uint(QHttpHeaders::WellKnownHeader::Authorization),
      32, uint(QHttpHeaders::WellKnownHeader::CacheControl),
      33, uint(QHttpHeaders::WellKnownHeader::CacheStatus),
      34, uint(QHttpHeaders::WellKnownHeader::CalManagedID),
      35, uint(QHttpHeaders::WellKnownHeader::CalDAVTimezones),
      36, uint(QHttpHeaders::WellKnownHeader::CapsuleProtocol),
      37, uint(QHttpHeaders::WellKnownHeader::CDNCacheControl),
      38, uint(QHttpHeaders::WellKnownHeader::CDNLoop),
      39, uint(QHttpHeaders::WellKnownHeader::CertNotAfter),
      40, uint(QHttpHeaders::WellKnownHeader::CertNotBefore),
      41, uint(QHttpHeaders::WellKnownHeader::ClearSiteData),
      42, uint(QHttpHeaders::WellKnownHeader::ClientCert),
      43, uint(QHttpHeaders::WellKnownHeader::ClientCertChain),
      44, uint(QHttpHeaders::WellKnownHeader::Close),
      45, uint(QHttpHeaders::WellKnownHeader::Connection),
      46, uint(QHttpHeaders::WellKnownHeader::ContentDigest),
      47, uint(QHttpHeaders::WellKnownHeader::ContentDisposition),
      48, uint(QHttpHeaders::WellKnownHeader::ContentEncoding),
      49, uint(QHttpHeaders::WellKnownHeader::ContentID),
      50, uint(QHttpHeaders::WellKnownHeader::ContentLanguage),
      51, uint(QHttpHeaders::WellKnownHeader::ContentLength),
      52, uint(QHttpHeaders::WellKnownHeader::ContentLocation),
      53, uint(QHttpHeaders::WellKnownHeader::ContentRange),
      54, uint(QHttpHeaders::WellKnownHeader::ContentSecurityPolicy),
      55, uint(QHttpHeaders::WellKnownHeader::ContentSecurityPolicyReportOnly),
      56, uint(QHttpHeaders::WellKnownHeader::ContentType),
      57, uint(QHttpHeaders::WellKnownHeader::Cookie),
      58, uint(QHttpHeaders::WellKnownHeader::CrossOriginEmbedderPolicy),
      59, uint(QHttpHeaders::WellKnownHeader::CrossOriginEmbedderPolicyReportOnly),
      60, uint(QHttpHeaders::WellKnownHeader::CrossOriginOpenerPolicy),
      61, uint(QHttpHeaders::WellKnownHeader::CrossOriginOpenerPolicyReportOnly),
      62, uint(QHttpHeaders::WellKnownHeader::CrossOriginResourcePolicy),
      63, uint(QHttpHeaders::WellKnownHeader::DASL),
      64, uint(QHttpHeaders::WellKnownHeader::Date),
      65, uint(QHttpHeaders::WellKnownHeader::DAV),
      66, uint(QHttpHeaders::WellKnownHeader::DeltaBase),
      67, uint(QHttpHeaders::WellKnownHeader::Depth),
      68, uint(QHttpHeaders::WellKnownHeader::Destination),
      69, uint(QHttpHeaders::WellKnownHeader::DifferentialID),
      70, uint(QHttpHeaders::WellKnownHeader::DPoP),
      71, uint(QHttpHeaders::WellKnownHeader::DPoPNonce),
      72, uint(QHttpHeaders::WellKnownHeader::EarlyData),
      73, uint(QHttpHeaders::WellKnownHeader::ETag),
      74, uint(QHttpHeaders::WellKnownHeader::Expect),
      75, uint(QHttpHeaders::WellKnownHeader::ExpectCT),
      76, uint(QHttpHeaders::WellKnownHeader::Expires),
      77, uint(QHttpHeaders::WellKnownHeader::Forwarded),
      78, uint(QHttpHeaders::WellKnownHeader::From),
      79, uint(QHttpHeaders::WellKnownHeader::Hobareg),
      80, uint(QHttpHeaders::WellKnownHeader::Host),
      81, uint(QHttpHeaders::WellKnownHeader::If),
      82, uint(QHttpHeaders::WellKnownHeader::IfMatch),
      83, uint(QHttpHeaders::WellKnownHeader::IfModifiedSince),
      84, uint(QHttpHeaders::WellKnownHeader::IfNoneMatch),
      85, uint(QHttpHeaders::WellKnownHeader::IfRange),
      86, uint(QHttpHeaders::WellKnownHeader::IfScheduleTagMatch),
      87, uint(QHttpHeaders::WellKnownHeader::IfUnmodifiedSince),
      88, uint(QHttpHeaders::WellKnownHeader::IM),
      89, uint(QHttpHeaders::WellKnownHeader::IncludeReferredTokenBindingID),
      90, uint(QHttpHeaders::WellKnownHeader::KeepAlive),
      91, uint(QHttpHeaders::WellKnownHeader::Label),
      92, uint(QHttpHeaders::WellKnownHeader::LastEventID),
      93, uint(QHttpHeaders::WellKnownHeader::LastModified),
      94, uint(QHttpHeaders::WellKnownHeader::Link),
      95, uint(QHttpHeaders::WellKnownHeader::Location),
      96, uint(QHttpHeaders::WellKnownHeader::LockToken),
      97, uint(QHttpHeaders::WellKnownHeader::MaxForwards),
      98, uint(QHttpHeaders::WellKnownHeader::MementoDatetime),
      99, uint(QHttpHeaders::WellKnownHeader::Meter),
     100, uint(QHttpHeaders::WellKnownHeader::MIMEVersion),
     101, uint(QHttpHeaders::WellKnownHeader::Negotiate),
     102, uint(QHttpHeaders::WellKnownHeader::NEL),
     103, uint(QHttpHeaders::WellKnownHeader::ODataEntityId),
     104, uint(QHttpHeaders::WellKnownHeader::ODataIsolation),
     105, uint(QHttpHeaders::WellKnownHeader::ODataMaxVersion),
     106, uint(QHttpHeaders::WellKnownHeader::ODataVersion),
     107, uint(QHttpHeaders::WellKnownHeader::OptionalWWWAuthenticate),
     108, uint(QHttpHeaders::WellKnownHeader::OrderingType),
     109, uint(QHttpHeaders::WellKnownHeader::Origin),
     110, uint(QHttpHeaders::WellKnownHeader::OriginAgentCluster),
     111, uint(QHttpHeaders::WellKnownHeader::OSCORE),
     112, uint(QHttpHeaders::WellKnownHeader::OSLCCoreVersion),
     113, uint(QHttpHeaders::WellKnownHeader::Overwrite),
     114, uint(QHttpHeaders::WellKnownHeader::PingFrom),
     115, uint(QHttpHeaders::WellKnownHeader::PingTo),
     116, uint(QHttpHeaders::WellKnownHeader::Position),
     117, uint(QHttpHeaders::WellKnownHeader::Prefer),
     118, uint(QHttpHeaders::WellKnownHeader::PreferenceApplied),
     119, uint(QHttpHeaders::WellKnownHeader::Priority),
     120, uint(QHttpHeaders::WellKnownHeader::ProxyAuthenticate),
     121, uint(QHttpHeaders::WellKnownHeader::ProxyAuthenticationInfo),
     122, uint(QHttpHeaders::WellKnownHeader::ProxyAuthorization),
     123, uint(QHttpHeaders::WellKnownHeader::ProxyStatus),
     124, uint(QHttpHeaders::WellKnownHeader::PublicKeyPins),
     125, uint(QHttpHeaders::WellKnownHeader::PublicKeyPinsReportOnly),
     126, uint(QHttpHeaders::WellKnownHeader::Range),
     127, uint(QHttpHeaders::WellKnownHeader::RedirectRef),
     128, uint(QHttpHeaders::WellKnownHeader::Referer),
     129, uint(QHttpHeaders::WellKnownHeader::Refresh),
     130, uint(QHttpHeaders::WellKnownHeader::ReplayNonce),
     131, uint(QHttpHeaders::WellKnownHeader::ReprDigest),
     132, uint(QHttpHeaders::WellKnownHeader::RetryAfter),
     133, uint(QHttpHeaders::WellKnownHeader::ScheduleReply),
     134, uint(QHttpHeaders::WellKnownHeader::ScheduleTag),
     135, uint(QHttpHeaders::WellKnownHeader::SecPurpose),
     136, uint(QHttpHeaders::WellKnownHeader::SecTokenBinding),
     137, uint(QHttpHeaders::WellKnownHeader::SecWebSocketAccept),
     138, uint(QHttpHeaders::WellKnownHeader::SecWebSocketExtensions),
     139, uint(QHttpHeaders::WellKnownHeader::SecWebSocketKey),
     140, uint(QHttpHeaders::WellKnownHeader::SecWebSocketProtocol),
     141, uint(QHttpHeaders::WellKnownHeader::SecWebSocketVersion),
     142, uint(QHttpHeaders::WellKnownHeader::Server),
     143, uint(QHttpHeaders::WellKnownHeader::ServerTiming),
     144, uint(QHttpHeaders::WellKnownHeader::SetCookie),
     145, uint(QHttpHeaders::WellKnownHeader::Signature),
     146, uint(QHttpHeaders::WellKnownHeader::SignatureInput),
     147, uint(QHttpHeaders::WellKnownHeader::SLUG),
     148, uint(QHttpHeaders::WellKnownHeader::SoapAction),
     149, uint(QHttpHeaders::WellKnownHeader::StatusURI),
     150, uint(QHttpHeaders::WellKnownHeader::StrictTransportSecurity),
     151, uint(QHttpHeaders::WellKnownHeader::Sunset),
     152, uint(QHttpHeaders::WellKnownHeader::SurrogateCapability),
     153, uint(QHttpHeaders::WellKnownHeader::SurrogateControl),
     154, uint(QHttpHeaders::WellKnownHeader::TCN),
     155, uint(QHttpHeaders::WellKnownHeader::TE),
     156, uint(QHttpHeaders::WellKnownHeader::Timeout),
     157, uint(QHttpHeaders::WellKnownHeader::Topic),
     158, uint(QHttpHeaders::WellKnownHeader::Traceparent),
     159, uint(QHttpHeaders::WellKnownHeader::Tracestate),
     160, uint(QHttpHeaders::WellKnownHeader::Trailer),
     161, uint(QHttpHeaders::WellKnownHeader::TransferEncoding),
     162, uint(QHttpHeaders::WellKnownHeader::TTL),
     163, uint(QHttpHeaders::WellKnownHeader::Upgrade),
     164, uint(QHttpHeaders::WellKnownHeader::Urgency),
     165, uint(QHttpHeaders::WellKnownHeader::UserAgent),
     166, uint(QHttpHeaders::WellKnownHeader::VariantVary),
     167, uint(QHttpHeaders::WellKnownHeader::Vary),
     168, uint(QHttpHeaders::WellKnownHeader::Via),
     169, uint(QHttpHeaders::WellKnownHeader::WantContentDigest),
     170, uint(QHttpHeaders::WellKnownHeader::WantReprDigest),
     171, uint(QHttpHeaders::WellKnownHeader::WWWAuthenticate),
     172, uint(QHttpHeaders::WellKnownHeader::XContentTypeOptions),
     173, uint(QHttpHeaders::WellKnownHeader::XFrameOptions),
     174, uint(QHttpHeaders::WellKnownHeader::AcceptCharset),
     175, uint(QHttpHeaders::WellKnownHeader::CPEPInfo),
     176, uint(QHttpHeaders::WellKnownHeader::Pragma),
     177, uint(QHttpHeaders::WellKnownHeader::ProtocolInfo),
     178, uint(QHttpHeaders::WellKnownHeader::ProtocolQuery),

       0        // eod
};

Q_CONSTINIT const QMetaObject QHttpHeaders::staticMetaObject = { {
    nullptr,
    qt_meta_stringdata_CLASSQHttpHeadersENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSQHttpHeadersENDCLASS,
    nullptr,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSQHttpHeadersENDCLASS_t,
        // enum 'WellKnownHeader'
        QtPrivate::TypeAndForceComplete<QHttpHeaders::WellKnownHeader, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<QHttpHeaders, std::true_type>
    >,
    nullptr
} };

QT_WARNING_POP
